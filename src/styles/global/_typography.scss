@use "sass:map";
@use "sass:list";

$_default-font-sizes: (
  "body": "clamp(1.31rem, calc(1.24rem + 0.37vw), 1.50rem)",
  "h4": "clamp(1.2rem, calc(0.94rem + 1.32vw), 1.88rem)",
  "h3": "clamp(1.44rem, calc(1.09rem + 1.76vw), 2.34rem)",
  "h2": "clamp(1.73rem, calc(1.26rem + 2.35vw), 2.93rem)",
  "h1": "clamp(2.07rem, calc(1.45rem + 3.1vw), 3.66rem)",
);

// Allows overriding individual font-size definitions
$font-sizes: () !default;
$_sizes: map.merge($_default-font-sizes, $font-sizes);


:root {
  @each $key, $size in $_sizes {
    --font-size-#{$key}: #{$size};
  }
}

$_size-keys: map.remove($_sizes, "body");
$_size-keys: map.keys($_size-keys);

@each $key in $_size-keys {
  #{$key},
  .font-size-#{$key} {
    font-size: var(--font-size-#{$key});
  }

  $_size-keys: list.append($_size-keys, #{".font-size-#{$key}"});
}

// @debug $_size-keys;

// Headlines  and headline utility classes 
:is(#{$_size-keys}) {
  line-height: calc(2px + 2ex + 2px);
  margin-block-end: 0.65em;
  font-weight: var(--font-weight-bold);

  // Help prevent overflow of long words/names/URLs
  overflow-wrap: break-word;

  // Optional, not supported for all languages
  hyphens: auto;
}


// Content spacing
$content-selectors: "article, .content" !default;
$content-spacer: 1em !default;

#{$content-selectors} {
  --content-spacer: #{$content-spacer};

  > * + *,
  :where(ul:not([class])) li + li  {
    margin-block-start: var(--content-spacer);
  }

  :where(ul, ol) + p {
    margin-block-start: calc(var(--content-spacer) * 2);
  }

  blockquote {
    margin-block: 2rem;
    padding: 0.5em 1.5em;
    border-left: 2px solid var(--color-primary);
  }

  > a:not([class]) {
    display: inline-block;
  }
  
  hr {
    margin: 8vh 5vw;
    border-style: dashed;
    border-color: var(--color-primary);
  }
}

strong {
  font-weight: var(--font-weight-bold);
}
